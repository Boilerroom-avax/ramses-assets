name: Auto-Resolve Tokenlist Conflicts

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - '**/tokenlist.json'

jobs:
  resolve-conflicts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create merge script
        run: |
          cat > merge_tokenlist.py << 'EOL'
          import json
          import re
          import sys

          def merge_tokenlists(filepath):
              with open(filepath, 'r') as f:
                  content = f.read()

              # Extract the sections using regex
              pattern = r'<<<<<<< HEAD(.*?)=====+(.*?)>>>>>>> .*'
              match = re.search(pattern, content, re.DOTALL)
              if not match:
                  raise Exception('Could not find conflict markers')
              
              ours = match.group(1).strip()
              theirs = match.group(2).strip()
              
              # Parse both versions
              try:
                  ours_json = json.loads(ours)
                  theirs_json = json.loads(theirs)
              except json.JSONDecodeError as e:
                  raise Exception(f'Failed to parse JSON: {str(e)}')
              
              # Get all tokens
              our_tokens = ours_json.get('tokens', [[]])[0]
              their_tokens = theirs_json.get('tokens', [[]])[0]
              
              # Create a map of existing tokens by lowercase address
              merged_tokens = {}
              for token in our_tokens:
                  merged_tokens[token['address'].lower()] = token
              
              # Add their tokens if not already present
              for token in their_tokens:
                  if token['address'].lower() not in merged_tokens:
                      merged_tokens[token['address'].lower()] = token
              
              # Create the merged result
              result = ours_json.copy()
              result['tokens'] = [list(merged_tokens.values())]
              
              # Write back the merged file
              with open(filepath, 'w') as f:
                  json.dump(result, f, indent=2, sort_keys=True)
                  f.write('\n')
              
              print(f'Successfully merged {filepath}')

          if __name__ == '__main__':
              if len(sys.argv) != 2:
                  print('Usage: python merge_tokenlist.py <filepath>')
                  sys.exit(1)
              merge_tokenlists(sys.argv[1])
          EOL

      - name: Fix PR conflicts
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_BRANCH=${{ github.event.pull_request.head.ref }}
          PR_REPO=${{ github.event.pull_request.head.repo.full_name }}
          
          echo "Checking PR #$PR_NUMBER from $PR_REPO:$PR_BRANCH"
          
          # If it's a fork, we need to checkout the PR directly
          if [ "$PR_REPO" != "${{ github.repository }}" ]; then
            git remote add pr-fork https://github.com/$PR_REPO.git
            git fetch pr-fork "$PR_BRANCH"
            git checkout -b "$PR_BRANCH" pr-fork/"$PR_BRANCH"
          else
            git fetch origin "$PR_BRANCH"
            git checkout "$PR_BRANCH"
          fi
          
          # Check for conflicts before attempting to merge
          if ! gh pr view "$PR_NUMBER" --json mergeStateStatus | grep -q "CONFLICTING"; then
            echo "PR #$PR_NUMBER has no conflicts with main. No action needed."
            exit 0
          fi
          
          echo "PR #$PR_NUMBER has conflicts with main. Attempting to resolve..."
          
          # Try to merge main branch
          if ! git merge origin/main --no-edit; then
            echo "Conflict detected in PR #$PR_NUMBER, resolving automatically"
            
            # Find conflicted tokenlist files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U | grep tokenlist.json)
            
            if [ -z "$CONFLICTED_FILES" ]; then
              echo "No tokenlist conflicts found, aborting merge"
              git merge --abort
              exit 0
            fi
            
            for FILE in $CONFLICTED_FILES; do
              echo "Resolving conflicts in $FILE"
              
              # Use our Python script to merge the JSON
              python3 merge_tokenlist.py "$FILE"
              
              # Mark as resolved
              git add "$FILE"
            done
            
            # Commit and push the resolved conflicts
            git -c user.name='GitHub Actions' -c user.email='actions@github.com' \
              commit -m "Automatically resolve tokenlist.json conflicts with main"
              
            # If it's from a fork, we can't push directly
            if [ "$PR_REPO" != "${{ github.repository }}" ]; then
              echo "This PR is from a fork. Cannot automatically push changes."
              echo "The PR author needs to merge the main branch manually."
              gh pr comment "$PR_NUMBER" --body "I detected conflicts with the main branch but couldn't automatically fix them because this PR is from a fork. Please merge the main branch into your PR branch to resolve conflicts."
            else
              git push origin "$PR_BRANCH"
              gh pr comment "$PR_NUMBER" --body "I've automatically resolved conflicts with the main branch by merging all token entries."
            fi
          else
            # This should not happen since we already checked for conflicts
            echo "Unexpected: No conflicts detected for PR #$PR_NUMBER when merging"
            git reset --hard HEAD@{1}  # Undo the merge
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}