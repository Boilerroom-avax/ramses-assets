name: Auto-Resolve Tokenlist Conflicts

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - '**/tokenlist.json'

jobs:
  resolve-conflicts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Find and update PRs with conflicts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Get all open PRs
          PR_LIST=$(gh pr list --json number,headRefName,mergeStateStatus,files --jq '.[] | select(.files[].path | contains("tokenlist.json")) | {number: .number, branch: .headRefName, mergeStateStatus: .mergeStateStatus}')
          
          echo "Checking PRs for tokenlist conflicts: $PR_LIST"
          
          echo "$PR_LIST" | jq -c '.[]' | while read -r PR_INFO; do
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_BRANCH=$(echo "$PR_INFO" | jq -r '.branch')
            MERGE_STATUS=$(echo "$PR_INFO" | jq -r '.mergeStateStatus')
            
            echo "Checking PR #$PR_NUMBER (branch: $PR_BRANCH, status: $MERGE_STATUS) for conflicts"
            
            # Check if PR has conflicts
            if [ "$MERGE_STATUS" != "CONFLICTING" ]; then
              echo "PR #$PR_NUMBER has no conflicts, skipping"
              continue
            fi
            
            echo "PR #$PR_NUMBER has conflicts, attempting to resolve"
            
            # Checkout the PR branch
            git fetch origin "$PR_BRANCH"
            git checkout "$PR_BRANCH"
            
            # Attempt to merge main
            if ! git merge origin/main --no-edit; then
              echo "Conflict detected in PR #$PR_NUMBER, resolving automatically"
              
              # Find conflicted tokenlist files
              CONFLICTED_FILES=$(git diff --name-only --diff-filter=U | grep tokenlist.json)
              
              if [ -z "$CONFLICTED_FILES" ]; then
                echo "No tokenlist conflicts found, aborting merge"
                git merge --abort
                continue
              fi
              
              for FILE in $CONFLICTED_FILES; do
                # Extract and merge the tokenlist entries
                node -e "
                  const fs = require('fs');
                  
                  // Read the conflicted file with markers
                  const content = fs.readFileSync('$FILE', 'utf8');
                  
                  // Extract the sections
                  const [header, ours, theirs, footer] = content.split(/<<<<<<< HEAD|=======|>>>>>>> .*/);
                  
                  try {
                    // Parse JSON from both sides (handling potential formatting issues)
                    const oursJson = JSON.parse(header + ours);
                    const theirsJson = JSON.parse(header + theirs + footer);
                    
                    // Merge the token lists (avoiding duplicates)
                    const mergedTokens = [...oursJson.tokens[0]];
                    const existingAddresses = new Set(mergedTokens.map(token => token.address.toLowerCase()));
                    
                    theirsJson.tokens[0].forEach(token => {
                      if (!existingAddresses.has(token.address.toLowerCase())) {
                        mergedTokens.push(token);
                        existingAddresses.add(token.address.toLowerCase());
                      }
                    });
                    
                    // Create merged result
                    const result = {
                      ...oursJson,
                      tokens: [mergedTokens]
                    };
                    
                    // Write merged file
                    fs.writeFileSync('$FILE', JSON.stringify(result, null, 2) + '\n');
                    console.log('Successfully merged $FILE');
                  } catch (error) {
                    console.error('Error merging $FILE:', error);
                    process.exit(1);
                  }
                "
                
                # Mark as resolved
                git add "$FILE"
              done
              
              # Commit and push the resolved conflicts
              git -c user.name='GitHub Actions' -c user.email='actions@github.com' \
                commit -m "Automatically resolve tokenlist.json conflicts with main"
              git push origin "$PR_BRANCH"
              
              # Add comment to PR
              gh pr comment "$PR_NUMBER" --body "I've automatically resolved conflicts between this PR and the main branch by merging the token entries."
            else
              # This should not happen since we already checked for conflicts
              echo "Unexpected: No conflicts detected for PR #$PR_NUMBER when merging"
              git reset --hard HEAD@{1}  # Undo the merge
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-update PR with main branch
        if: github.event_name == 'pull_request_target'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_BRANCH=${{ github.event.pull_request.head.ref }}
          PR_REPO=${{ github.event.pull_request.head.repo.full_name }}
          
          echo "Updating PR #$PR_NUMBER from $PR_REPO:$PR_BRANCH"
          
          # If it's a fork, we need to checkout the PR directly
          if [ "$PR_REPO" != "${{ github.repository }}" ]; then
            git remote add pr-fork https://github.com/$PR_REPO.git
            git fetch pr-fork "$PR_BRANCH"
            git checkout -b "$PR_BRANCH" pr-fork/"$PR_BRANCH"
          else
            git fetch origin "$PR_BRANCH"
            git checkout "$PR_BRANCH"
          fi
          
          # Check for conflicts before attempting to merge
          if ! gh pr view "$PR_NUMBER" --json mergeStateStatus | grep -q "CONFLICTING"; then
            echo "PR #$PR_NUMBER has no conflicts with main. No action needed."
            exit 0
          fi
          
          echo "PR #$PR_NUMBER has conflicts with main. Attempting to resolve..."
          
          # Try to merge main branch
          if ! git merge origin/main --no-edit; then
            echo "Conflict detected in PR #$PR_NUMBER, resolving automatically"
            
            # Find conflicted tokenlist files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U | grep tokenlist.json)
            
            if [ -z "$CONFLICTED_FILES" ]; then
              echo "No tokenlist conflicts found, aborting merge"
              git merge --abort
              exit 0
            fi
            
            for FILE in $CONFLICTED_FILES; do
              # Extract and merge the tokenlist entries
              node -e "
                const fs = require('fs');
                
                // Read the conflicted file with markers
                const content = fs.readFileSync('$FILE', 'utf8');
                
                // Extract the sections
                const [header, ours, theirs, footer] = content.split(/<<<<<<< HEAD|=======|>>>>>>> .*/);
                
                try {
                  // Parse JSON from both sides (handling potential formatting issues)
                  const oursJson = JSON.parse(header + ours);
                  const theirsJson = JSON.parse(header + theirs + footer);
                  
                  // Merge the token lists (avoiding duplicates)
                  const mergedTokens = [...oursJson.tokens[0]];
                  const existingAddresses = new Set(mergedTokens.map(token => token.address.toLowerCase()));
                  
                  theirsJson.tokens[0].forEach(token => {
                    if (!existingAddresses.has(token.address.toLowerCase())) {
                      mergedTokens.push(token);
                      existingAddresses.add(token.address.toLowerCase());
                    }
                  });
                  
                  // Create merged result
                  const result = {
                    ...oursJson,
                    tokens: [mergedTokens]
                  };
                  
                  // Write merged file
                  fs.writeFileSync('$FILE', JSON.stringify(result, null, 2) + '\n');
                  console.log('Successfully merged $FILE');
                } catch (error) {
                  console.error('Error merging $FILE:', error);
                  process.exit(1);
                }
              "
              
              # Mark as resolved
              git add "$FILE"
            done
            
            # Commit and push the resolved conflicts
            git -c user.name='GitHub Actions' -c user.email='actions@github.com' \
              commit -m "Automatically resolve tokenlist.json conflicts with main"
              
            # If it's from a fork, we can't push directly
            if [ "$PR_REPO" != "${{ github.repository }}" ]; then
              echo "This PR is from a fork. Cannot automatically push changes."
              echo "The PR author needs to merge the main branch manually."
              gh pr comment "$PR_NUMBER" --body "I detected conflicts with the main branch but couldn't automatically fix them because this PR is from a fork. Please merge the main branch into your PR branch to resolve conflicts."
            else
              git push origin "$PR_BRANCH"
              gh pr comment "$PR_NUMBER" --body "I've automatically resolved conflicts with the main branch by merging the token entries."
            fi
          else
            # This should not happen since we already checked for conflicts
            echo "Unexpected: No conflicts detected for PR #$PR_NUMBER when merging"
            git reset --hard HEAD@{1}  # Undo the merge
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
